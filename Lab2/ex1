from pgmpy.models import DiscreteBayesianNetwork
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination
import networkx as nx


network_model = DiscreteBayesianNetwork(
    [('S','O'),
     ('S','L'),
     ('S','M'),
     ('L','M')]
)

CPD_S = TabularCPD(variable='S', variable_card=2, values=[[0.4], [0.6]])

CPD_O = TabularCPD(variable='O', variable_card=2,
values=[[0.7,0.1],
[0.3,0.9]],
evidence=['S'],
evidence_card=[2])

CPD_L = TabularCPD(variable='L', variable_card=2,
values=[[0.8,0.3],
[0.2,0.7]],
evidence=['S'],
evidence_card=[2])

CPD_M = TabularCPD(variable='M', variable_card=2,
values=[[0.9,0.6,0.5,0.2],
[0.1,0.4,0.5,0.8]],
evidence=['S','L'],
evidence_card=[2,2])

network_model.add_cpds(CPD_O, CPD_L, CPD_S, CPD_M)
print(network_model.check_model())
print(network_model.get_independencies())

infer = VariableElimination(network_model)
result = infer.query(variables=['S'], evidence={'O': 1, 'L': 1, 'M': 1})

print(result)
